/*
 * –£—Å–ª–æ–≤–∏–µ:
 *    –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ 1‚â§ùëõ‚â§103 –∏ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä—é–∫–∑–∞–∫–∞
 *    0‚â§W‚â§2*10^6. –ö–∞–∂–¥–∞—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ–∫ –∑–∞–¥–∞—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å 0‚â§ùëêùëñ‚â§2*10^6
 *    –∏ –æ–±—ä—ë–º 0<ùë§ùëñ‚â§2*10^6 –ø—Ä–µ–¥–º–µ—Ç–∞ (ùëõ, ùëä, ùëêùëñ, ùë§ùëñ ‚Äî —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞).
 *
 *    –í—ã–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —á–∞—Å—Ç–µ–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
 *    –º–æ–∂–Ω–æ –æ—Ç–¥–µ–ª–∏—Ç—å –ª—é–±—É—é —á–∞—Å—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –æ–±—ä—ë–º –ø—Ä–∏ —ç—Ç–æ–º
 *    –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—Å—è), –ø–æ–º–µ—â–∞—é—â–∏—Ö—Å—è –≤ –¥–∞–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫,
 *    —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –Ω–µ –º–µ–Ω–µ–µ —Ç—Ä—ë—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
 */

#include <vector>
#include <list>
#include <iostream>
#include <algorithm>

using namespace std;

int main()
{
    unsigned int items_count, bag_volume;
    cin >> items_count >> bag_volume;
    list<pair<int, int>> items;
    for (size_t i = 0; i < items_count; i++)
    {
        int cost = 0, volume = 0;
        cin >> cost >> volume;
        items.push_back(make_pair(cost, volume));
    }
    items.sort([](const pair<int, int> &a, const pair<int, int> &b)
               { return (((double)a.first) / ((double)a.second)) > (((double)b.first) / ((double)b.second)); });
    double bag_cost = 0.0;
    while (bag_volume > 0)
    {
        if (items.empty())
            break;
        unsigned int item_cost = (*items.begin()).first;
        unsigned int item_volume = (*items.begin()).second;
        if (bag_volume < item_volume)
        {
            bag_cost += ((double)bag_volume) * ((double)item_cost) / ((double)item_volume);
            bag_volume = 0;
        }
        else
        {
            bag_cost += (double)item_cost;
            bag_volume -= item_volume;
            items.pop_front();
        }
    }
    cout.setf(ios::fixed, ios::floatfield);
    cout.precision(3);
    cout << bag_cost << endl;
    return 0;
}
